##  열거형
### color 값을 표현하려고 한다면 
```
#include <iostream>

using namespace std;

int main()
{
	int colors[3] = { 255,128,64 };

	const int red = 0;
	const int green = 1;
	const int blue = 2;

	cout << "Red : " << colors[red] << endl;
	cout << "Green : " << colors[green] << endl;
	cout << "Blue : " << colors[blue] << endl;
}
```
### 위의 코드처럼 구현할 변수 red,green,blue를 color에 사용한다는 것을 좀더 명확하게 표현하고 싶다면 enum을 사용함  
### 명시적으로 값을 지정해 줄 수 있으나 하지 않으면 0,1,2로 값 할당
```
#include <iostream>

using namespace std;

enum Color
{
	Red,Green,Blue
};
int main()
{
	int colors[3] = { 255,128,64 };

	cout << "Red : " << colors[Red] << endl;
	cout << "Green : " << colors[Green] << endl;
	cout << "Blue : " << colors[Blue] << endl;
}
```
### struct를 사용해도 가능은 함
```
#include <iostream>

using namespace std;

enum Color
{
	Red,Green,Blue
};

struct ColorStruct
{
	int Red;
	int Green;
	int Blue;
};

int main()
{
	int colors[3] = { 255,128,64 };

	cout << "Red : " << colors[Red] << endl;
	cout << "Green : " << colors[Green] << endl;
	cout << "Blue : " << colors[Blue] << endl;
	int avg0 = (colors[Red] + colors[Green] + colors[Blue]) / 3;
	cout << avg0 << endl;

	ColorStruct cs = { 255,128,64 };
	int avg1 = (cs.Red + cs.Green + cs.Blue) / 3;
	cout << avg1 << endl;
}
```
### struct와 enum을 사용해서 평균을 구하는 식 구현함 
```
#include <iostream>

using namespace std;

enum Color
{
	Red,Green,Blue
};

struct ColorStruct
{
	int Red;
	int Green;
	int Blue;
};

int main()
{
	int colors[3] = { 255,128,64 };

	cout << "Red : " << colors[Red] << endl;
	cout << "Green : " << colors[Green] << endl;
	cout << "Blue : " << colors[Blue] << endl;
	int total = 0;
	for (int i = 0; i < 3; ++i)
	{
		total += colors[i];
	}
	int avg0 = total / 3;
	cout << avg0 << endl;

	ColorStruct cs = { 255,128,64 };
	int avg1 = (cs.Red + cs.Green + cs.Blue) / 3;
	cout << avg1 << endl;
}
```
### enum에 식을 사용했을때가 더 유용함 value가 추가 됬을때 struct는 값을 cs.alpha 등으로 찍어줘야 하지만 enum은  i 조건문만 바꿔주면 됨
```
#include <iostream>

using namespace std;

enum Color
{
	Red,Green,Blue, SIZE
};

struct ColorStruct
{
	int Red;
	int Green;
	int Blue;
};

int main()
{
	int colors[3] = { 255,128,64 };

	cout << "Red : " << colors[Red] << endl;
	cout << "Green : " << colors[Green] << endl;
	cout << "Blue : " << colors[Blue] << endl;
	int total = 0;
	for (int i = 0; i < SIZE; ++i)
	{
		total += colors[i];
	}
	int avg0 = total / 3;
	cout << avg0 << endl;

	ColorStruct cs = { 255,128,64 };
	int avg1 = (cs.Red + cs.Green + cs.Blue) / 3;
	cout << avg1 << endl;
}
```
### 이런 식으로 SIZE를 사용하면 중간에 값이 추가되도 평균 값 코드가 바뀌지 않음 

### 글자 설정을 표현하는 enum형 구현 비트 플래그로 연동하는 것도 자주 사용함 
```
#include <iostream>

using namespace std;

enum TextAttribute
{
	Bold = 1,
	Underline = 2,
	Italic = 4,
	Strikethrough = 8
};

int main()
{
	int textAttrs = 0;
	textAttrs |= Bold;
	textAttrs |= Underline;

	if (textAttrs & Italic)
		cout << "Italic" << endl;
	cout << textAttrs << endl;
}
```
### ::는 범위 지정 연산자 TextAttribute::Bold; 처럼 스코프 지정을 해줄 수 있음 
```
#include <iostream>

using namespace std;

enum TextAttribute
{
	Bold = 1,
	Underline = 2,
	Italic = 4,
	Strikethrough = 8
};

enum CIrcleAttribute
{
	Bold = 1,
};

int main()
{
	int textAttrs = 0;
	textAttrs |= TextAttribute::Bold;
	textAttrs |= TextAttribute::Underline;

	if (textAttrs & Italic)
		cout << "Italic" << endl;
	cout << textAttrs << endl;
}
```
### 위의 소스는 컴파일이 안됨 에러가 남 Bold가 겹치기 때문
### 위와 같은 문제를 보완 하기 위해 unscoped enum, scoped enum으로 분리 되었음
### enum 뒤에 struct or class를 붙이면 됨 -> 범위가 있는 scoped enum으로 변경되어 빌드 가능
```
#include <iostream>

using namespace std;

enum struct TextAttribute
{
	Bold = 1,
	Underline = 2,
	Italic = 4,
	Strikethrough = 8
};

enum class CIrcleAttribute
{
	Bold = 1,
};

enum RectAttributge
{
	Bold = 1,
	Underline = 2
};

int main()
{
	int sum = Bold + RectAttributge::Underline;
	cout << sum << endl;

	sum = (int)TextAttribute::Bold + (int)TextAttribute::Italic + Bold;
	cout << sum << endl;
}
}
```
### unscoped 열거형은 정수형 처럼 사용이 가능
### scoped int로 캐스팅을 해줘야 함
```
#include <iostream>

using namespace std;

enum struct Color
{
	Red, Green, Blue, SIZE
};

int main()
{
	int colors[(int)Color::SIZE] = { 255,128,64 };
	colors[(int)Color::Red];
}
```
### scoped enum으로 color 구현
```
#include <iostream>

using namespace std;

enum  Color
{
	Red = 10000000000
};

int main()
{
	cout << Red << endl;
}
```
### 값이 너무 커서 overflow가 일어남 4byte정수형이기 때문
```
#include <iostream>

using namespace std;

enum  Color : int64_t
{
	Red = 10000000000
};

int main()
{
	cout << Red << endl;
}
```
### :뒤에 정수형 사이즈를 지정해 줄 수 있음, scoped에서도 마찬가지
```
#include <iostream>

using namespace std;

enum  class Color : int64_t
{
	Red = 10000000000
};

int main()
{
	cout << (int64_t)Color::Red << endl;
}
```
### 열거형도 타임이기에 선선이 가능
```
#include <iostream>

using namespace std;

enum  class Color 
{
	Red, Green, Blue
};

int main()
{
	Color color = Color::Red;
	if (color == Color::Red)
	{
		cout << "Red" << endl;
	}
	if (color == Color::Green)
	{
		cout << "Green" << endl;
	}
	if (color == Color::Blue)
	{
		cout << "Blue" << endl;
	}

	Color color1 = Color(1);
	if (color1 == Color::Red)
	{
		cout << "Red" << endl;
	}
	if (color1 == Color::Green)
	{
		cout << "Green" << endl;
	}
	if (color1 == Color::Blue)
	{
		cout << "Blue" << endl;
	}
}
```




